#include <iostream>
#include <chrono>

using namespace std;

int problem1_multiplesOf3and5(void);
int problem2_evenFibonacciNumbers(void);

int main()
{
    // Solve and time the amount of time taken for problem 1
    auto start = chrono::high_resolution_clock::now();
    int answer = problem1_multiplesOf3and5();
    auto end = chrono::high_resolution_clock::now();
    std::chrono::duration<double> time_taken = end -start;

    cout << "The answer to problem #1 is " << answer << " Time taken was " << time_taken.count() << " seconds." << endl;

    // Solve and time the amount of time taken for problem 2
    start = chrono::high_resolution_clock::now();
    answer = problem2_evenFibonacciNumbers();
    end = chrono::high_resolution_clock::now();
    time_taken = end -start;

    cout << "The answer to problem #2 is " << answer << " Time taken was " << time_taken.count() << " seconds." << endl;

    return 0;
}

int problem1_multiplesOf3and5(void)
{
    /*
     * If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
     * The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
     *
     * Completion note: The correct answer should be 233168
     */

    int sum = 0;

    for(int i = 3; i < 1000; ++i)
    {
        if(!(i%3) || !(i%5))
        {
            sum +=i;
        }
    }

    return(sum);
}

int problem2_evenFibonacciNumbers(void)
{
    /*
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
     *
     * Completion note: The answer is 4613732
     */

    int new_Fibonacci_number = 0;
    int sum = 0;
    int a = 0;
    int b = 1;

    while(new_Fibonacci_number < 4000000)
    {
        new_Fibonacci_number = a + b;
        a = b;
        b = new_Fibonacci_number;

        if(!(new_Fibonacci_number%2))
        {
           sum += new_Fibonacci_number;
        }
    }

    return(sum);
}
